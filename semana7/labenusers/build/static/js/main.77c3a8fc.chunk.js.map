{"version":3,"sources":["components/TelaCadastro.js","components/TelaLista.js","App.js","serviceWorker.js","index.js"],"names":["Cadastro","state","newUserNameValue","newUserEmailValue","onChangeName","event","setState","target","value","onChangeEmail","onClickCreateUser","body","name","email","axios","post","headers","Authorization","then","response","window","alert","catch","error","onChange","this","userNameValue","userEmailValue","onClick","React","Component","Lista","listaUsuarios","getAllUsers","get","data","console","log","onClickDeleteUser","userId","delete","map","user","id","App","paginaAtual","onClickMudaPagina","proximaPagina","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"qOAGaA,EAAb,4MACIC,MAAQ,CACNC,iBAAkB,GAClBC,kBAAmB,IAHzB,EAMIC,aAAe,SAACC,GACd,EAAKC,SAAS,CAACJ,iBAAkBG,EAAME,OAAOC,SAPpD,EAUIC,cAAgB,SAACJ,GACf,EAAKC,SAAS,CAACH,kBAAmBE,EAAME,OAAOC,SAXrD,EAcIE,kBAAoB,WAClB,IAAMC,EAAO,CACXC,KAAM,EAAKX,MAAMC,iBACjBW,MAAO,EAAKZ,MAAME,mBAGpBW,IAAMC,KAAK,sEAAuEJ,EAAM,CACtFK,QAAS,CACPC,cAAe,4BAEhBC,MAAK,SAACC,GACPC,OAAOC,MAAM,wBACZC,OAAM,SAACC,GACRH,OAAOC,MAAM,YAGf,EAAKf,SAAS,CAACJ,iBAAkB,GAAIC,kBAAmB,MA9B9D,uDAkCQ,OACI,6BACI,yCACA,2BAAOqB,SAAUC,KAAKrB,aAAcI,MAAOiB,KAAKxB,MAAMyB,gBACtD,6BAAK,6BACL,0CACA,2BAAOF,SAAUC,KAAKhB,cAAeD,MAAOiB,KAAKxB,MAAM0B,iBACvD,6BAAK,6BACL,4BAAQC,QAASH,KAAKf,mBAAtB,eA1ChB,GAA8BmB,IAAMC,WCAvBC,EAAb,4MACI9B,MAAQ,CACN+B,cAAe,IAFrB,EASIC,YAAc,WACVnB,IAAMoB,IAAI,sEAAuE,CAC7ElB,QAAS,CACLC,cAAe,4BAEpBC,MAAK,SAACC,GACL,EAAKb,SAAS,CAAC0B,cAAeb,EAASgB,UACxCb,OAAM,SAACC,GACNa,QAAQC,IAAId,OAjBxB,EAqBIe,kBAAoB,SAACC,GACjBzB,IAAM0B,OAAN,8EAAoFD,GAAU,CAC1FvB,QAAS,CACLC,cAAe,4BAEpBC,MAAK,SAACC,GACLC,OAAOC,MAAM,uBACb,EAAKY,iBACNX,OAAM,SAACC,GACNH,OAAOC,MAAM,aA9BzB,kEAMQI,KAAKQ,gBANb,+BAsCa,IAAD,OACJ,OACI,6BACI,wDACCR,KAAKxB,MAAM+B,cAAcS,KAAI,SAACC,GAC5B,OAAO,2BAAIA,EAAK9B,KAAT,IAAe,4BAAQgB,QAAS,kBAAM,EAAKU,kBAAkBI,EAAKC,MAAnD,cA3CzC,GAA2Bd,IAAMC,WC+BlBc,E,4MA5Bb3C,MAAQ,CACN4C,YAAa,Y,EAGfC,kBAAoB,WAClB,IAAIC,EAAgB,GAElBA,EAD4B,aAA3B,EAAK9C,MAAM4C,YACI,QAEA,WAGlB,EAAKvC,SAAS,CAACuC,YAAaE,K,uDAI5B,OACA,6BACE,4BAAQnB,QAASH,KAAKqB,mBACQ,aAA3BrB,KAAKxB,MAAM4C,YAA6B,iCAAgC,mCAE3E,6BAAK,6BACuB,aAA3BpB,KAAKxB,MAAM4C,YAA6B,kBAAC,EAAD,MAAe,kBAAC,EAAD,W,GAvB5ChB,IAAMC,WCOJkB,QACW,cAA7B5B,OAAO6B,SAASC,UAEe,UAA7B9B,OAAO6B,SAASC,UAEhB9B,OAAO6B,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzC,MAAK,SAAA0C,GACJA,EAAaC,gBAEdvC,OAAM,SAAAC,GACLa,QAAQb,MAAMA,EAAMuC,c","file":"static/js/main.77c3a8fc.chunk.js","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\n\r\nexport class Cadastro extends React.Component {\r\n    state = {\r\n      newUserNameValue: '',\r\n      newUserEmailValue: ''\r\n    }\r\n\r\n    onChangeName = (event) => {\r\n      this.setState({newUserNameValue: event.target.value})\r\n    }\r\n    \r\n    onChangeEmail = (event) => {\r\n      this.setState({newUserEmailValue: event.target.value})\r\n    }\r\n\r\n    onClickCreateUser = () => {\r\n      const body = {\r\n        name: this.state.newUserNameValue,\r\n        email: this.state.newUserEmailValue\r\n      }\r\n\r\n      axios.post('https://us-central1-labenu-apis.cloudfunctions.net/labenusers/users', body, {\r\n        headers: {\r\n          Authorization: \"artur-candelori-julian\"\r\n        }\r\n      }).then((response) => {\r\n        window.alert('Usuário criado')\r\n      }).catch((error) => {\r\n        window.alert('Erro!')\r\n      })\r\n\r\n      this.setState({newUserNameValue: '', newUserEmailValue: ''})\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <label>Nome: </label>\r\n                <input onChange={this.onChangeName} value={this.state.userNameValue}/>\r\n                <br/><br/>\r\n                <label>Email: </label>\r\n                <input onChange={this.onChangeEmail} value={this.state.userEmailValue}/>\r\n                <br/><br/>\r\n                <button onClick={this.onClickCreateUser}>Salvar</button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport axios from 'axios';\r\n\r\nexport class Lista extends React.Component {\r\n    state = {\r\n      listaUsuarios: [], \r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getAllUsers()\r\n    }\r\n\r\n    getAllUsers = () => {\r\n        axios.get('https://us-central1-labenu-apis.cloudfunctions.net/labenusers/users', {\r\n            headers: {\r\n                Authorization: \"artur-candelori-julian\"\r\n            }\r\n        }).then((response) => {\r\n            this.setState({listaUsuarios: response.data})\r\n        }).catch((error) => {\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n    onClickDeleteUser = (userId) => {\r\n        axios.delete(`https://us-central1-labenu-apis.cloudfunctions.net/labenusers/users/${userId}`, {\r\n            headers: {\r\n                Authorization: \"artur-candelori-julian\"\r\n            }\r\n        }).then((response) => {\r\n            window.alert('Usuário deletado')\r\n            this.getAllUsers()\r\n        }).catch((error) => {\r\n            window.alert('Erro!')\r\n        })\r\n    }\r\n\r\n    \r\n\r\n    /* onClickRemoveUsuario() {\r\n    } */\r\n    render(){\r\n        return (\r\n            <div>\r\n                <h2>Usuários Cadastrados:</h2>\r\n                {this.state.listaUsuarios.map((user) => {\r\n                   return <p>{user.name} <button onClick={() => this.onClickDeleteUser(user.id)}>X</button></p>\r\n                })}    \r\n            </div>\r\n        );\r\n    }\r\n}    \r\n","import React from 'react';\nimport axios from 'axios'\nimport {Cadastro} from './components/TelaCadastro';\nimport {Lista} from './components/TelaLista';\n\nclass App extends React.Component {\n  state = {\n    paginaAtual: 'cadastro'\n  }\n\n  onClickMudaPagina = () => {\n    let proximaPagina = ''\n    if(this.state.paginaAtual === 'cadastro') {\n      proximaPagina = 'lista'\n    } else {\n      proximaPagina = 'cadastro'\n    }\n\n    this.setState({paginaAtual: proximaPagina})\n  }\n\n  render() {\n    return (\n    <div>\n      <button onClick={this.onClickMudaPagina}>\n        {this.state.paginaAtual === 'cadastro' ? 'Ir para a lista de usuários' : 'Ir para a página de cadastro'}\n      </button>\n      <br/><br/>\n      {this.state.paginaAtual === 'cadastro' ? <Cadastro /> : <Lista />}\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}